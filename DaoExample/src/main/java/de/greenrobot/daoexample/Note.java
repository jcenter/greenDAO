package de.greenrobot.daoexample;

import de.greenrobot.daoexample.DaoSession;
import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 
/**
 * Entity mapped to table "NOTE".
 */
public class Note {

    private Long id;
    /** Not-null value. */
    private String text;
    private String comment;
    private java.util.Date date;
    private Boolean boo;
    private Byte bit;
    private java.util.Date dat;
    private Double dou;
    private Float flo;
    private Long lon;
    private Integer in;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient NoteDao myDao;


    public Note() {
    }

    public Note(Long id) {
        this.id = id;
    }

    public Note(Long id, String text, String comment, java.util.Date date, Boolean boo, Byte bit, java.util.Date dat, Double dou, Float flo, Long lon, Integer in) {
        this.id = id;
        this.text = text;
        this.comment = comment;
        this.date = date;
        this.boo = boo;
        this.bit = bit;
        this.dat = dat;
        this.dou = dou;
        this.flo = flo;
        this.lon = lon;
        this.in = in;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getNoteDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    /** Not-null value. */
    public String getText() {
        return text;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setText(String text) {
        this.text = text;
    }

    public String getComment() {
        return comment;
    }

    public void setComment(String comment) {
        this.comment = comment;
    }

    public java.util.Date getDate() {
        return date;
    }

    public void setDate(java.util.Date date) {
        this.date = date;
    }

    public Boolean getBoo() {
        return boo;
    }

    public void setBoo(Boolean boo) {
        this.boo = boo;
    }

    public Byte getBit() {
        return bit;
    }

    public void setBit(Byte bit) {
        this.bit = bit;
    }

    public java.util.Date getDat() {
        return dat;
    }

    public void setDat(java.util.Date dat) {
        this.dat = dat;
    }

    public Double getDou() {
        return dou;
    }

    public void setDou(Double dou) {
        this.dou = dou;
    }

    public Float getFlo() {
        return flo;
    }

    public void setFlo(Float flo) {
        this.flo = flo;
    }

    public Long getLon() {
        return lon;
    }

    public void setLon(Long lon) {
        this.lon = lon;
    }

    public Integer getIn() {
        return in;
    }

    public void setIn(Integer in) {
        this.in = in;
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }


    /** merge */
    public void merge(Note model){
        if(this.id != model.getId()){
            return;
        }
        if(model.getId() != null){
            this.id = model.getId();
        }
        if(model.getText() != null){
            this.text = model.getText();
        }
        if(model.getComment() != null){
            this.comment = model.getComment();
        }
        if(model.getDate() != null){
            this.date = model.getDate();
        }
        if(model.getBoo() != null){
            this.boo = model.getBoo();
        }
        if(model.getBit() != null){
            this.bit = model.getBit();
        }
        if(model.getDat() != null){
            this.dat = model.getDat();
        }
        if(model.getDou() != null){
            this.dou = model.getDou();
        }
        if(model.getFlo() != null){
            this.flo = model.getFlo();
        }
        if(model.getLon() != null){
            this.lon = model.getLon();
        }
        if(model.getIn() != null){
            this.in = model.getIn();
        }
    }

}
